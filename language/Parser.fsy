%{

open AST

%}

// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token LET SEMICOLOMN LACC RACC
%token EQUALS BIGGER SMALLER NOT
%token AND OR
%token IF THEN ELSE
%token ECHO
%token FUN LPAR RPAR RETURN
%token < string > ID
%token < string > STRING
%token < int32 > INT
%token < bool > BOOL
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Statement list > start

%%

// These are the rules of the grammar along with the F# code of the
// actions executed as rules are reduced.
start: program EOF { $1 }

program:
  | statement                                         { [$1] }
  | statement program                                 { $1 :: $2 }

codeblock:
  | LACC program RACC                                 { CodeBlock $2 }

statement:
  | LET ID EQUALS expression                          { Declaration ($2, $4) }
  | ID EQUALS expression                              { Assigment ($1, $3) }
  | IF expression THEN codeblock ELSE codeblock       { If ($2, $4, Some $6) }
  | IF expression THEN codeblock                      { If ($2, $4, None) }
  | ECHO expression                                   { Echo $2 }
  | expression                                        { Expression $1 }

atomic:
  | STRING                                            { String $1 }
  | INT                                               { Int $1 }
  | BOOL                                              { Bool $1 }

expression:
  | expression AND expression1                        { And ($1, $3) }
  | expression OR expression1                         { Or ($1, $3) }
  | NOT expression                                    { Not $2 }
  | expression1                                       { $1 }

expression1:
  | expression1 EQUALS EQUALS expression2             { Equals ($1, $4) }
  | expression1 NOT EQUALS expression2                { NotEquals ($1, $4) }
  | expression2                                       { $1 }

expression2:
  | expression1 BIGGER expression2                    { Bigger ($1, $3) }
  | expression1 SMALLER expression2                   { Smaller ($1, $3) }
  | ID                                                { Id $1 }
  | atomic                                            { Atomic $1 }
  | LPAR expression RPAR                              { Nested $2 }